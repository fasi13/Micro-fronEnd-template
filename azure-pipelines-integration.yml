trigger: none

pool:
  name: Rideau

variables:
  project: 'E2E.Content.Management.UI'

steps:
- task: SonarQubePrepare@4
  displayName: 'SonarQube Prepare'
  inputs:
    SonarQube: 'SonarQube-Rideau-PD'
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: '$(project)'
    cliProjectName: '$(project)'
    cliSources: '.'
    extraProperties: |
        sonar.sources=src
        sonar.exclusions=**/node_modules/**,src/assets/**
        sonar.tests=src
        sonar.test.inclusions=**/*.spec.ts;**/*.spec.js
        sonar.typescript.lcov.reportPaths=coverage/lcov.info
        sonar.pullrequest.key=$(System.PullRequest.PullRequestId)
        sonar.pullrequest.branch=$(System.PullRequest.SourceBranch)
        sonar.pullrequest.base=develop

- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Check/Install Node.js'

- task: Npm@1
  displayName: 'Install Npm Dependencies'
  inputs:
    command: install

# - task: Npm@1
#   displayName: 'Run Tests'
#   inputs:
#     command: custom
#     customCommand: 'run test'

# - task: PublishTestResults@2
#   condition: succeededOrFailed()
#   inputs:
#     testRunner: JUnit
#     testResultsFiles: '**/test-results.xml'

# - task: PublishCodeCoverageResults@1
#   inputs: 
#     codeCoverageTool: Cobertura
#     summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/*coverage.xml'
#     reportDirectory: '$(System.DefaultWorkingDirectory)/**/coverage'
#     failIfCoverageEmpty: true
    
- task: SonarQubeAnalyze@4
  displayName: 'SonarQube Analyze'

- task: SonarQubePublish@4
  displayName: 'SonarQube Publish'
  inputs:
    pollingTimeoutSec: '300'
    
- task: sonar-buildbreaker@8
  displayName: 'SonarQube Build Breaker'
  inputs:
    SonarQube: 'SonarQube-Rideau-PD'