trigger:
- develop

pool:
  name: Local

variables:
  project: 'E2E.Loyalty.Forge.UI'

steps:
- task: SonarQubePrepare@4
  displayName: 'SonarQube Prepare'
  inputs:
    SonarQube: 'sonarqube-loyalty'
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: '$(project)'
    cliProjectName: '$(project)'
    cliSources: '.'
    extraProperties: |
        sonar.login=admin
        sonar.password=admin
        sonar.projectVersion=1.0
        sonar.sourceEncoding=UTF-8
        sonar.sources=src
        sonar.exclusions=**/node_modules/**
        sonar.tests=src
        sonar.test.inclusions=**/*.spec.ts;**/*.spec.js
        sonar.typescript.lcov.reportPaths=coverage/lcov.info
        sonar.branch.name=$(Build.SourceBranchName)

- task: NodeTool@0
  inputs:
    versionSpec: '8.x'
  displayName: 'Check/Install Node.js'

- task: Npm@1
  displayName: 'Install Npm Dependencies'
  inputs:
    command: install

- task: Npm@1
  displayName: 'Run Tests'
  inputs:
    command: custom
    customCommand: 'run test --watch=false'

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: JUnit
    testResultsFiles: '**/test-results.xml'

- task: PublishCodeCoverageResults@1
  inputs: 
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/*coverage.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/**/coverage'
    failIfCoverageEmpty: true
    
- task: SonarQubeAnalyze@4
  displayName: 'SonarQube Analyze'

- task: SonarQubePublish@4
  displayName: 'SonarQube Publish'
  inputs:
    pollingTimeoutSec: '300'
    
- task: sonar-buildbreaker@8
  displayName: 'SonarQube Build Breaker'
  inputs:
    SonarQube: 'sonarqube-loyalty'